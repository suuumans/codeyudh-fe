/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as ProblemsRouteImport } from './routes/problems'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProblemsProblemIdRouteImport } from './routes/problems.$problemId'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const ProblemsRoute = ProblemsRouteImport.update({
  id: '/problems',
  path: '/problems',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProblemsProblemIdRoute = ProblemsProblemIdRouteImport.update({
  id: '/$problemId',
  path: '/$problemId',
  getParentRoute: () => ProblemsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/problems': typeof ProblemsRouteWithChildren
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/problems/$problemId': typeof ProblemsProblemIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/problems': typeof ProblemsRouteWithChildren
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/problems/$problemId': typeof ProblemsProblemIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/problems': typeof ProblemsRouteWithChildren
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/problems/$problemId': typeof ProblemsProblemIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/problems'
    | '/profile'
    | '/register'
    | '/settings'
    | '/problems/$problemId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/problems'
    | '/profile'
    | '/register'
    | '/settings'
    | '/problems/$problemId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/problems'
    | '/profile'
    | '/register'
    | '/settings'
    | '/problems/$problemId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  ProblemsRoute: typeof ProblemsRouteWithChildren
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/problems': {
      id: '/problems'
      path: '/problems'
      fullPath: '/problems'
      preLoaderRoute: typeof ProblemsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/problems/$problemId': {
      id: '/problems/$problemId'
      path: '/$problemId'
      fullPath: '/problems/$problemId'
      preLoaderRoute: typeof ProblemsProblemIdRouteImport
      parentRoute: typeof ProblemsRoute
    }
  }
}

interface ProblemsRouteChildren {
  ProblemsProblemIdRoute: typeof ProblemsProblemIdRoute
}

const ProblemsRouteChildren: ProblemsRouteChildren = {
  ProblemsProblemIdRoute: ProblemsProblemIdRoute,
}

const ProblemsRouteWithChildren = ProblemsRoute._addFileChildren(
  ProblemsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  ProblemsRoute: ProblemsRouteWithChildren,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
